{
  "useEffect snippet": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact ",
    "prefix": "effect",
    "body": ["useEffect(()=>{", "", "},[])", ""],
    "description": "react useEffect"
  },

  "useState snippet": {
    "scope": "javascript, javascriptreact",
    "prefix": "state",
    "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState()"],
    "description": "react useState"
  },

  "typescript useState snippet": {
    "scope": "typescript, typescriptreact",
    "prefix": "state",
    "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState<$2>($3)"],
    "description": "react typescript useState"
  },

  "useReducer snippet": {
    "scope": "javascript, javascriptreact",
    "prefix": "reducer",
    "body": [
      "const [$1, update${1/(.*)/${1:/capitalize}/}] = useReducer(recuder, init)"
    ],
    "description": "react useReducer"
  },

  "typescript useReducer snippet": {
    "scope": "typescript, typescriptreact",
    "prefix": "reducer",
    "body": [
      "const [$1, update${1/(.*)/${1:/capitalize}/}] = useReducer<$2>(recuder, init)"
    ],
    "description": "react typescript useReducer"
  },

  "FC": {
    "scope": "typescript, typescriptreact",
    "prefix": "fc",
    "body": [
      "import { ReactNode } from 'react'",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}: ReactNode  = () => {",
      "  return <div>$TM_FILENAME_BASE</div>",
      "}"
    ],
    "description": "react typescript function component"
  },

  "FCWP": {
    "scope": "typescript, typescriptreact",
    "prefix": "fcwp",
    "body": [
      "import { ReactNode } from 'react'",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "  ",
      "}",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}: ReactNode<${TM_FILENAME_BASE}Props> = ({ }) => {",
      "  return <div>$TM_FILENAME_BASE</div>",
      "}"
    ],
    "description": "react typescript function component with interface"
  }
}
